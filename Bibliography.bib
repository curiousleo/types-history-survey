
@incollection{de_bruijn_survey_1980,
	location = {London; New York},
	title = {A Survey of the Project {AUTOMATH}},
	pages = {479--490},
	booktitle = {To H. B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism},
	publisher = {Academic Press},
	author = {de Bruijn, Nicolaas G.},
	editor = {Seldin, Jonathan P. and Hindley, Roger},
	date = {1980}
}

@incollection{howard_formulae-as-types_1980,
	location = {London; New York},
	title = {The Formulæ-as-Types Notion of Construction},
	pages = {479--490},
	booktitle = {To H. B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism},
	publisher = {Academic Press},
	author = {Howard, William A.},
	editor = {Seldin, Jonathan P. and Hindley, Roger},
	date = {1980},
	note = {Original paper manuscript from 1969}
}

@book{sambin_intuitionistic_1984,
	location = {Naples},
	title = {Intuitionistic Type Theory},
	series = {Studies in Proof Theory},
	pagetotal = {91},
	publisher = {Bibliopolis},
	author = {Martin-Löf, Per},
	editor = {Sambin, Giovanni},
	date = {1984},
	note = {Notes by Giovanni Sambin of a series of lectures given in Padua, June 1980}
}

@inproceedings{martin-lof_constructive_1985,
	location = {Upper Saddle River, {NJ}, {USA}},
	title = {Constructive Mathematics and Computer Programming},
	isbn = {0-13-561465-1},
	url = {http://dl.acm.org/citation.cfm?id=3721.3731},
	pages = {167--184},
	booktitle = {Proc. Of a Discussion Meeting of the Royal Society of London on Mathematical Logic and Programming Languages},
	publisher = {Prentice-Hall, Inc.},
	author = {Martin-Löf, P.},
	urldate = {2014-11-20},
	date = {1985}
}

@article{martin-lof_truth_1987,
	title = {Truth of a proposition, evidence of a judgement, validity of a proof},
	volume = {73},
	issn = {0039-7857, 1573-0964},
	url = {http://link.springer.com/article/10.1007/BF00484985},
	doi = {10.1007/BF00484985},
	pages = {407--420},
	number = {3},
	journaltitle = {Synthese},
	shortjournal = {Synthese},
	author = {Martin-Löf, Per},
	urldate = {2014-11-21},
	date = {1987-12-01},
	langid = {english},
	keywords = {Epistemology, Logic, Metaphysics, Philosophy, Philosophy of Language},
	file = {Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/CREQSURS/Martin-Löf - 1987 - Truth of a proposition, evidence of a judgement, v.pdf:application/pdf;Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/IQRIRQEI/10.html:text/html}
}

@incollection{coquand_type_2014,
	edition = {Fall 2014},
	title = {Type Theory},
	url = {http://plato.stanford.edu/archives/fall2014/entries/type-theory/},
	abstract = {The topic of type theory is fundamental both in logic and computerscience. We limit ourselves here to sketch some aspects that areimportant in logic. For the importance of types in computer science, werefer the reader for instance to Reynolds 1983 and 1985.},
	booktitle = {The Stanford Encyclopedia of Philosophy},
	author = {Coquand, Thierry},
	editor = {Zalta, Edward N.},
	urldate = {2014-10-17},
	date = {2014},
	keywords = {category theory, Frege, Gottlob, Frege, Gottlob: theorem and foundations for arithmetic, logic: paraconsistent, mathematics: inconsistent, Peano, Giuseppe, Principia Mathematica, Russell, Bertrand, type theory: Church's type theory, type theory: constructive},
	file = {SEP - Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/5KQ5JTBS/entriesype-theory.html:text/html}
}

@mvbook{sorensen_lectures_2006,
	location = {Amsterdam; Boston},
	edition = {First edition},
	title = {Lectures on the Curry-Howard Isomorphism},
	volume = {149},
	isbn = {9780444520777},
	series = {Studies in Logic and the Foundation of Mathematics},
	abstract = {The Curry-Howard isomorphism states an amazing correspondence between systems of formal logic as encountered in proof theory and computational calculi as found in type theory. For instance, minimal propositional logic corresponds to simply typed lambda-calculus, first-order logic corresponds to dependent types, second-order logic corresponds to polymorphic types, sequent calculus is related to explicit substitution, etc.  The isomorphism has many aspects, even at the syntactic level: formulas correspond to types, proofs correspond to terms, provability corresponds to inhabitation, proof normalization corresponds to term reduction, etc.  But there is more to the isomorphism than this. For instance, it is an old idea---due to Brouwer, Kolmogorov, and Heyting---that a constructive proof of an implication is a procedure that transforms proofs of the antecedent into proofs of the succedent; the Curry-Howard isomorphism gives syntactic representations of such procedures. The Curry-Howard isomorphism also provides theoretical foundations for many modern proof-assistant systems (e.g. Coq). This book give an introduction  to parts of proof theory and related aspects of type theory relevant for the Curry-Howard isomorphism. It can serve as an introduction to any or both of typed lambda-calculus and intuitionistic logic. Key features  - The Curry-Howard Isomorphism treated as common theme  - Reader-friendly introduction to two complementary subjects: Lambda-calculus and constructive logics  - Thorough study of the connection between calculi and logics  - Elaborate study of classical logics and control operators  - Account of dialogue games for classical and intuitionistic logic  - Theoretical foundations of computer-assisted reasoning The Curry-Howard Isomorphism treated as the common theme. Reader-friendly introduction to two complementary subjects: lambda-calculus and  constructive logics Thorough study of the connection between calculi and logics. Elaborate study of classical logics and control operators. Account of dialogue games for classical and intuitionistic logic. Theoretical foundations of computer-assisted reasoning},
	pagetotal = {460},
	publisher = {Elsevier},
	author = {Sørensen, Morten H. and Urzyczyn, Pawel},
	date = {2006-06-01},
	keywords = {Curry-Howard isomorphism, Lambda calculus, Proof theory}
}

@incollection{lambek_-calculus_1980,
	location = {London; New York},
	title = {From λ-Calculus to Cartesian Closed Categories},
	pages = {479--490},
	booktitle = {To H. B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism},
	publisher = {Academic Press},
	author = {Lambek, Joachim},
	editor = {Seldin, Jonathan P. and Hindley, Roger},
	date = {1980},
	note = {Original paper manuscript from 1969},
	file = {PhilPapers - Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/33B9MUTB/HOWTFN.html:text/html}
}

@incollection{barendregt_lambda_1992,
	location = {Oxford; New York},
	title = {Lambda calculi with types},
	volume = {2},
	isbn = {9780198537618},
	series = {Handbooks of Logic in Computer Science},
	abstract = {The Handbook of Logic in Computer Science is a multi-volume work covering all major areas of application of logic to theoretical computer science.  The Handbook comprises six volumes. Each volume contains five or six chapters giving an in-depth overview of one of the major topics in the field. It is the result of many years of co-operative effort by some of the most eminent frontline researchers in the area. It will no doubt be the standard reference work in logic and theoretical computer science for years to come - essential reading for all those interested in theoretical computer science and logic.},
	volumes = {6},
	booktitle = {Handbook of Logic in Computer Science, Volume 2: Background: Computational Structures},
	publisher = {Oxford University Press},
	author = {Barendregt, Henk},
	editor = {Abramsky, Samson and Gabbay, Dov M. and Maibaum, Thomas S. E.},
	date = {1992}
}

@book{barendregt_lambda_2013,
	location = {Cambridge; New York},
	title = {Lambda Calculus with Types},
	isbn = {9780521766142},
	abstract = {This handbook with exercises reveals in formalisms, hitherto mainly used for hardware and software design and verification, unexpected mathematical beauty. The lambda calculus forms a prototype universal programming language, which in its untyped version is related to Lisp, and was treated in the first author's classic The Lambda Calculus (1984). The formalism has since been extended with types and used in functional programming (Haskell, Clean) and proof assistants (Coq, Isabelle, {HOL}), used in designing and verifying {IT} products and mathematical proofs.  In this book, the authors focus on three classes of typing for lambda terms: simple types, recursive types and intersection types. It is in these three formalisms of terms and types that the unexpected mathematical beauty is revealed. The treatment is authoritative and comprehensive, complemented by an exhaustive bibliography, and numerous exercises are provided to deepen the readers' understanding and increase their confidence using types.},
	pagetotal = {856},
	publisher = {Cambridge University Press},
	author = {Barendregt, Henk and Dekkers, Wil and Statman, Richard},
	date = {2013-06-20}
}

@article{church_formulation_1940,
	title = {A Formulation of the Simple Theory of Types},
	volume = {5},
	rights = {Copyright © 1940 Association for Symbolic Logic},
	issn = {0022-4812},
	url = {http://www.jstor.org/stable/2266170},
	doi = {10.2307/2266170},
	pages = {56--68},
	number = {2},
	journaltitle = {The Journal of Symbolic Logic},
	shortjournal = {The Journal of Symbolic Logic},
	author = {Church, Alonzo},
	urldate = {2014-10-27},
	date = {1940-06-01},
	file = {JSTOR Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/33X7JVM2/Church - 1940 - A Formulation of the Simple Theory of Types.pdf:application/pdf}
}

@article{milner_theory_1978,
	title = {A theory of type polymorphism in programming},
	volume = {17},
	issn = {0022-0000},
	url = {http://www.sciencedirect.com/science/article/pii/0022000078900144},
	doi = {10.1016/0022-0000(78)90014-4},
	abstract = {The aim of this work is largely a practical one. A widely employed style of programming, particularly in structure-processing languages which impose no discipline of types, entails defining procedures which work well on objects of a wide variety. We present a formal type discipline for such polymorphic procedures in the context of a simple programming language, and a compile time type-checking algorithm W which enforces the discipline. A Semantic Soundness Theorem (based on a formal semantics for the language) states that well-type programs cannot “go wrong” and a Syntactic Soundness Theorem states that if W accepts a program then it is well typed. We also discuss extending these results to richer languages; a type-checking algorithm based on W is in fact already implemented and working, for the metalanguage {ML} in the Edinburgh {LCF} system.},
	pages = {348--375},
	number = {3},
	journaltitle = {Journal of Computer and System Sciences},
	shortjournal = {Journal of Computer and System Sciences},
	author = {Milner, Robin},
	urldate = {2014-10-27},
	date = {1978-12},
	file = {ScienceDirect Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/ZHE2Z8DN/Milner - 1978 - A theory of type polymorphism in programming.pdf:application/pdf;ScienceDirect Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/IKTTRDIC/0022000078900144.html:text/html}
}

@inproceedings{luo_ecc_1989,
	title = {{ECC}, an extended calculus of constructions},
	doi = {10.1109/LICS.1989.39193},
	abstract = {A higher-order calculus {ECC} (extended calculus of constructions) is presented which can be seen as an extension of the calculus of constructions by adding strong sum types and a fully cumulative type hierarchy. {ECC} turns out to be rather expressive so that mathematical theories can be abstractly described and abstract mathematics may be adequately formalized. It is shown that {ECC} is strongly normalizing and has other nice proof-theoretic properties. An ω-set (realizability) model is described to show how the essential properties of the calculus can be captured set-theoretically},
	eventtitle = {Fourth Annual Symposium on Logic in Computer Science},
	pages = {386--395},
	booktitle = {Proceedings of the Fourth Annual Symposium on Logic in Computer Science},
	author = {Luo, Zhaohui},
	date = {1989-06},
	keywords = {Abstract algebra, abstract mathematics, Buildings, Calculus, Computer languages, Computer science, extended calculus of constructions, formal languages, formal logic, fully cumulative type hierarchy, Functional programming, higher-order calculus {ECC}, Inference algorithms, Mathematical model, Mathematics, proof-theoretic properties, realizability, set theory, strongly normalizing, strong sum types, ω-set},
	file = {IEEE Xplore Abstract Record:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/JQZFDS6C/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/F73MQPKF/Luo - 1989 - ECC, an extended calculus of constructions.pdf:application/pdf}
}

@article{coquand_calculus_1988,
	title = {The calculus of constructions},
	volume = {76},
	issn = {0890-5401},
	url = {http://www.sciencedirect.com/science/article/pii/0890540188900053},
	doi = {10.1016/0890-5401(88)90005-3},
	pages = {95--120},
	number = {2},
	journaltitle = {Information and Computation},
	shortjournal = {Information and Computation},
	author = {Coquand, Thierry and Huet, Gérard},
	urldate = {2014-10-31},
	date = {1988-02},
	file = {ScienceDirect Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/FIGSIM9F/Coquand and Huet - 1988 - The calculus of constructions.pdf:application/pdf;ScienceDirect Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/FHSASMHG/0890540188900053.html:text/html}
}

@incollection{bruijn_mathematical_1970,
	title = {The mathematical language {AUTOMATH}, its usage, and some of its extensions},
	rights = {©1970 Springer-Verlag},
	isbn = {978-3-540-04914-2, 978-3-540-36262-3},
	url = {http://link.springer.com/chapter/10.1007/BFb0060623},
	series = {Lecture Notes in Mathematics},
	pages = {29--61},
	number = {125},
	booktitle = {Symposium on Automatic Demonstration},
	publisher = {Springer Berlin Heidelberg},
	author = {Bruijn, N. G. de},
	editor = {Laudet, M. and Lacombe, D. and Nolin, L. and Schützenberger, M.},
	urldate = {2014-10-31},
	date = {1970-01-01},
	langid = {english},
	keywords = {Mathematical Logic and Foundations},
	file = {Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/5A6MX26T/BFb0060623.html:text/html}
}

@incollection{parigot_-calculus:_1992,
	title = {λμ-Calculus: An algorithmic interpretation of classical natural deduction},
	rights = {©1992 Springer-Verlag},
	isbn = {978-3-540-55727-2, 978-3-540-47279-7},
	url = {http://link.springer.com/chapter/10.1007/BFb0013061},
	series = {Lecture Notes in Computer Science},
	shorttitle = {λμ-Calculus},
	pages = {190--201},
	number = {624},
	booktitle = {Logic Programming and Automated Reasoning},
	publisher = {Springer Berlin Heidelberg},
	author = {Parigot, Michel},
	editor = {Voronkov, Andrei},
	urldate = {2014-11-01},
	date = {1992-01-01},
	langid = {english},
	keywords = {Artificial Intelligence (incl. Robotics), Mathematical Logic and Formal Languages, Mathematical Logic and Foundations},
	file = {Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/B66UD79G/Parigot - 1992 - λμ-Calculus An algorithmic interpretation of clas.pdf:application/pdf;Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/R4P96PRQ/10.html:text/html}
}

@incollection{girard_extension_1971,
	title = {Une Extension De ĽInterpretation De Gödel a ĽAnalyse, Et Son Application a ĽElimination Des Coupures Dans ĽAnalyse Et La Theorie Des Types},
	volume = {Volume 63},
	isbn = {0049-237X},
	url = {http://www.sciencedirect.com/science/article/pii/S0049237X08708437},
	series = {Proceedings of the Second Scandinavian Logic Symposium},
	pages = {63--92},
	booktitle = {Studies in Logic and the Foundations of Mathematics},
	publisher = {Elsevier},
	author = {Girard, Jean-Yves},
	editor = {{J.E. Fenstad}},
	urldate = {2014-11-23},
	date = {1971},
	file = {[J._E._Fenstad_(editor)]_Proceedings_of_the_Second(BookFi.org).pdf:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/M6VNXRG5/[J._E._Fenstad_(editor)]_Proceedings_of_the_Second(BookFi.org).pdf:application/pdf;ScienceDirect Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/A4IWMW4C/S0049237X08708437.html:text/html}
}

@article{kleene_inconsistency_1935,
	title = {The Inconsistency of Certain Formal Logics},
	volume = {36},
	rights = {Copyright © 1935 Annals of Mathematics},
	issn = {0003-486X},
	url = {http://www.jstor.org/stable/1968646},
	doi = {10.2307/1968646},
	series = {Second Series},
	pages = {630--636},
	number = {3},
	journaltitle = {Annals of Mathematics},
	shortjournal = {Annals of Mathematics},
	author = {Kleene, S. C. and Rosser, J. B.},
	urldate = {2014-11-02},
	date = {1935-07-01},
	file = {JSTOR Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/RBRQN59R/Kleene and Rosser - 1935 - The Inconsistency of Certain Formal Logics.pdf:application/pdf}
}

@book{artin_orie_1972,
	location = {Berlin; New York},
	edition = {2. éd.},
	title = {Théorie des topos et cohomologie étale des schémas},
	isbn = {3540058966},
	series = {Séminaire de géométrie algébrique du Bois-Marie},
	number = {{SGA} 4},
	publisher = {Springer-Verlag},
	author = {Artin, Michael},
	editora = {Grothendieck, Alexander and Verdier, Jean Louis},
	editoratype = {collaborator},
	date = {1972},
	keywords = {Categories (Mathematics), Geometry, Algebraic, Homology theory, Sheaf theory}
}

@book{luo_computation_1994,
	location = {Oxford; New York},
	title = {Computation and Reasoning: A Type Theory for Computer Science},
	isbn = {0198538359},
	series = {International series of monographs on computer science},
	shorttitle = {Computation and reasoning},
	abstract = {The book develops a type theory, studies its properties, and explains its uses in applications to computer science.  In particular, it shows how the study of type theory may offer a powerful and uniform language for programming, program specification and development, and logical reasoning.  The type theory developed here reflects a conceptual distinction between logical propositions and computational data types.  Starting from introducing the basic concepts, the author explains intuitively the meaning and use of the type-theoretic language with proof-theoretic justifications, and discusses various issues in the study of type theory.  The pragmatic use of the language is illustrated by developing an approach to specification and data refinement in type theory, which supports modular development of spcdifications, programs and proofs.},
	pagetotal = {244},
	publisher = {Oxford University Press},
	author = {Luo, Zhaohui},
	date = {1994-03-31},
	keywords = {Computer science},
	file = {[Luo_Z.]_Computation_and_reasoning._A_type_theory_(BookFi.org).djvu:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/ES59GB4P/[Luo_Z.]_Computation_and_reasoning._A_type_theory_(BookFi.org).djvu:image/vnd.djvu}
}

@thesis{girard_interpretation_1972,
	location = {Paris},
	title = {Interprétation fonctionnelle et élimination des coupures de l’arithmétique d’ordre supérieur},
	institution = {Université Paris 7},
	type = {phdthesis},
	author = {Girard, Jean-Yves},
	date = {1972}
}

@book{univalent_foundations_program_homotopy_2013,
	location = {Institute for Advanced Study},
	title = {Homotopy Type Theory: Univalent Foundations of Mathematics},
	publisher = {http://homotopytypetheory.org/book},
	author = {Univalent Foundations Program},
	date = {2013}
}

@thesis{luo_extended_1990,
	title = {An Extended Calculus of Constructions},
	abstract = {This thesis presents and studies a unifying theory of dependent types {ECC} --- Extended Calculus of Constructions. {ECC} integrates Coquand-Huet's (impredicative) calculus of constructions and Martin-Lof's (predicative) type theory with universes, and turns out to be a strong and expressive calculus for formalization of mathematics, structured proof development and program specification. The meta-theory of {ECC} is studied and we show that the calculus has good meta-theoretic properties. The main proof-theoretic result is the strong normalization  theorem, proved by using Girard-Tait's reducibility method based on a quasi normalization theorem which makes explicit the predicativity of the predicative universes. The strong normalization result shows the proof-theoretic consistency of the calculus; in particular, it implies the consistency of the embedded intuitionistic higher-order logic and the decidability of the theory. The meta-theoretic results establish the theoretical foundations both...},
	type = {phdthesis},
	author = {Luo, Zhaohui},
	date = {1990},
	file = {Citeseer - Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/IGAD585B/Luo and D - 1990 - An Extended Calculus of Constructions.pdf:application/pdf;Citeseer - Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/MV6TVIFP/summary.html:text/html}
}

@thesis{geuvers_logics_1993,
	title = {Logics and Type Systems},
	abstract = {from the last declaration in {\textbackslash}Delta (which is p:').  (oe-E) In fact the ([{\textbackslash}Theta]) is not exactly the ([{\textbackslash}Theta]) that is found by induction. Possibly some of the free variables in ([{\textbackslash}Theta]) are renamed. What happens is the following: 1. Consider the proof-context {\textbackslash}Delta 1 ] {\textbackslash}Delta 2 and especially the renaming of the declared variables in {\textbackslash}Delta 2 that has been caused by the operation ].  2. Rename the free proof-variables in ([{\textbackslash}Theta]) accordingly, obtaining say, ([{\textbackslash}Theta  0  ]). 3. Apply ([{\textbackslash}Sigma]) to ([{\textbackslash}Theta  0  ]). (There will in practice be no confusion if we just write ([{\textbackslash}Theta]) instead.) Of course the intended meaning is that the judgement below the double lines is derivable if the judgement above the lines is. This will be proved later in Theorem 3.2.8. It should be clear at this point however that there is a one-to-one correspondence between the occurrences of ' as a (non-discharged) premise in the deduction and declarations p:' in {\textbackslash}Delta.  Notation. If for {\textbackslash}Sigma a deducti...},
	type = {phdthesis},
	author = {Geuvers, Jan Herman},
	date = {1993},
	file = {Citeseer - Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/8F5ADEDG/Geuvers et al. - 1993 - Logics and Type Systems.pdf:application/pdf;Citeseer - Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/F5XHXTIF/summary.html:text/html}
}

@incollection{pfenning_inductively_1990,
	title = {Inductively defined types in the Calculus of Constructions},
	rights = {©1990 Springer-Verlag},
	isbn = {978-0-387-97375-3, 978-0-387-34808-7},
	url = {http://link.springer.com/chapter/10.1007/BFb0040259},
	series = {Lecture Notes in Computer Science},
	abstract = {We define the notion of an inductively defined type in the Calculus of Constructions and show how inductively defined types can be represented by closed types. We show that all primitive recursive functionals over these inductively defined types are also representable. This generalizes work by Böhm \& Berarducci on synthesis of functions on term algebras in the second-order polymorphic λ-calculus (F 2). We give several applications of this generalization, including a representation of F 2-programs in F 3, along with a definition of functions reify, reflect, and eval for F 2 in F 3. We also show how to define induction over inductively defined types and sketch some results that show that the extension of the Calculus of Construction by induction principles does not alter the set of functions in its computational fragment, F ω. This is because a proof by induction can be realized by primitive recursion, which is already definable in F ω.},
	pages = {209--228},
	number = {442},
	booktitle = {Mathematical Foundations of Programming Semantics},
	publisher = {Springer-Verlag},
	author = {Pfenning, Frank and Paulin-Mohring, Christine},
	editor = {Main, M. and Melton, A. and Mislove, M. and Schmidt, D.},
	urldate = {2014-11-26},
	date = {1990-01-01},
	langid = {english},
	keywords = {Algorithm Analysis and Problem Complexity, Logics and Meanings of Programs, Programming Techniques},
	file = {Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/AC993ZVF/Pfenning and Paulin-Mohring - 1990 - Inductively defined types in the Calculus of Const.pdf:application/pdf;Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/F87HM48G/BFb0040259.html:text/html}
}

@online{_mathematical_????,
	title = {Mathematical Structures in Computer Science},
	url = {http://journals.cambridge.org/action/displayJournal?jid=MSC},
	abstract = {Mathematical Structures in Computer Science is a journal of theoretical computer science which focuses on the application of ideas from the structural side of mathematics and mathematical logic to computer science. The journal aims to bridge the gap between theoretical contributions and software design, publishing original papers of a high standard and broad surveys with original perspectives in all areas of computing, provided that ideas or results from logic, algebra, geometry, category theory or other areas of logic and mathematics form a basis for the work. The journal welcomes applications to computing based on the use of specific mathematical structures (e.g. topological and order-theoretic structures) as well as on proof-theoretic notions or results. The journal will also accept contributions in new interdisciplinary fields bridging computer science, quantum physics, mathematics and information theory. In particular, papers on quantum information processing and communication, as well as on the related issues in quantum language design will be considered. The journal is also interested in papers on computational modelling of epigenetics phenomena, protein-protein interaction, stochasticity in molecular cascades. Mathematical approches to System Biology will be welcomed, within the broad frame of post-genomic views of embryogenesis and evolution., Mathematical Structures in Computer Science is a journal of theoretical computer science which focuses on the application of ideas from the structural side of mathematics and mathematical logic to computer science. The journal aims to bridge the gap between theoretical contributions and software design, publishing original papers of a high standard and broad surveys with original perspectives in all areas of computing, provided that ideas or results from logic, algebra, geometry, category theory or other areas of logic and mathematics form a basis for the work. The journal welcomes applications to computing based on the use of specific mathematical structures (e.g. topological and order-theoretic structures) as well as on proof-theoretic notions or results. The journal will also accept contributions in new interdisciplinary fields bridging computer science, quantum physics, mathematics and information theory. In particular, papers on quantum information processing and communication, as well as on the related issues in quantum language design will be considered. The journal is also interested in papers on computational modelling of epigenetics phenomena, protein-protein interaction, stochasticity in molecular cascades. Mathematical approches to System Biology will be welcomed, within the broad frame of post-genomic views of embryogenesis and evolution.},
	urldate = {2014-11-30},
	file = {Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/U8QNIT9I/loginShibb.html:text/html}
}

@article{selinger_control_2001,
	title = {Control categories and duality: on the categorical semantics of the lambda-mu calculus},
	volume = {11},
	issn = {1469-8072},
	url = {http://journals.cambridge.org/article_S096012950000311X},
	doi = {null},
	shorttitle = {Control categories and duality},
	abstract = {We give a categorical semantics to the call-by-name and call-by-value versions of Parigot\&apos;s λμ-calculus with disjunction types. We introduce the class of control categories, which combine a cartesian-closed structure with a premonoidal structure in the sense of Power and Robinson. We prove, via a categorical structure theorem, that the categorical semantics is equivalent to a {CPS} semantics in the style of Hofmann and Streicher. We show that the call-by-name λμ-calculus forms an internal language for control categories, and that the call-by-value λμ-calculus forms an internal language for the dual co-control categories. As a corollary, we obtain a syntactic duality result: there exist syntactic translations between call-by-name and call-by-value that are mutually inverse and preserve the operational semantics. This answers a question of Streicher and Reus.},
	pages = {207--260},
	number = {2},
	journaltitle = {Mathematical Structures in Computer Science},
	author = {Selinger, Peter},
	urldate = {2014-11-30},
	date = {2001-04},
	file = {Cambridge Journals Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/M4J2E8ZX/displayAbstract.html:text/html;Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/5496W8BU/Selinger - 2001 - Control categories and duality on the categorical.pdf:application/pdf}
}

@article{geuvers_t-calculus_2013,
	title = {The λμT-calculus},
	volume = {164},
	issn = {0168-0072},
	url = {http://www.sciencedirect.com/science/article/pii/S0168007212000814},
	doi = {10.1016/j.apal.2012.05.005},
	series = {Classical Logic and Computation 2010({CLAC} 2010)},
	abstract = {Calculi with control operators have been studied as extensions of simple type theory. Real programming languages contain datatypes, so to really understand control operators, one should also include these in the calculus. As a first step in that direction, we introduce λ μ T , a combination of Parigotʼs λμ-calculus and Gödelʼs T, to extend a calculus with control operators with a datatype of natural numbers with a primitive recursor.

We consider the problem of confluence on raw terms, and that of strong normalization for the well-typed terms. Observing some problems with extending the proofs of Baba et al. and Parigotʼs original confluence proof, we provide new, and improved, proofs of confluence (by complete developments) and strong normalization (by reducibility and a postponement argument) for our system.

We conclude with some remarks about extensions, choices, and prospects for an improved presentation.},
	pages = {676--701},
	number = {6},
	journaltitle = {Annals of Pure and Applied Logic},
	shortjournal = {Annals of Pure and Applied Logic},
	author = {Geuvers, Herman and Krebbers, Robbert and {McKinna}, James},
	urldate = {2014-11-30},
	date = {2013-06},
	keywords = {Confluence, Lambda calculus with control, Strong normalization},
	file = {ScienceDirect Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/72GHCDFT/Geuvers et al. - 2013 - The -calculus.pdf:application/pdf;ScienceDirect Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/AVKD4MRJ/S0168007212000814.html:text/html}
}

@inproceedings{griffin_formulae-as-type_1990,
	location = {New York, {NY}, {USA}},
	title = {A Formulae-as-type Notion of Control},
	isbn = {0-89791-343-4},
	url = {http://doi.acm.org/10.1145/96709.96714},
	doi = {10.1145/96709.96714},
	series = {{POPL} '90},
	abstract = {The programming language Scheme contains the control construct call/cc that allows access to the current continuation (the current control context). This, in effect, provides Scheme with first-class labels and jumps. We show that the well-known formulae-as-types correspondence, which relates a constructive proof of a formula \&agr; to a program of type \&agr;, can be extended to a typed Idealized Scheme. What is surprising about this correspondence is that it relates classical proofs to typed programs. The existence of computationally interesting “classical programs” —programs of type \&agr;, where \&agr; holds classically, but not constructively — is illustrated by the definition of conjunctively, disjunctive, and existential types using standard classical definitions. We also prove that all evaluations of typed terms in Idealized Scheme are finite.},
	pages = {47--58},
	booktitle = {Proceedings of the 17th {ACM} {SIGPLAN}-{SIGACT} Symposium on Principles of Programming Languages},
	publisher = {{ACM}},
	author = {Griffin, Timothy G.},
	urldate = {2014-11-30},
	date = {1990},
	file = {ACM Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/RBMHKXGM/Griffin - 1990 - A Formulae-as-type Notion of Control.pdf:application/pdf}
}

@book{benton_computational_1995,
	title = {Computational Types from a Logical Perspective I},
	abstract = {Moggi's computational lambda calculus is a metalanguage for denotational semantics which arose from the observation that many different notions of computation have the categorical structure of a strong monad on a cartesian closed category. In this paper we show that the computational lambda calculus also arises naturally as the term calculus corresponding (by the Curry-Howard correspondence) to a novel intuitionistic modal propositional logic. We give natural deduction, sequent calculus and Hilbert-style presentations of this logic and prove a strong normalisation result. 1 Introduction  The computational lambda calculus was introduced by Moggi as a metalanguage for denotational semantics which more faithfully models real programming language features such as non-termination, differing evaluation strategies, non-determinism and side-effects than does the ordinary simply typed lambda calculus [17, 18]. The starting point for Moggi's work is an explicit semantic distinction between compu...},
	author = {Benton, P. N. and Bierman, G. M. and Paiva, V. C. V. de},
	date = {1995},
	file = {Citeseer - Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/JRVD2DJ7/Benton et al. - 1995 - Computational Types from a Logical Perspective I.pdf:application/pdf;Citeseer - Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/6FN5HD4I/summary.html:text/html}
}

@article{moggi_notions_1991,
	title = {Notions of computation and monads},
	volume = {93},
	issn = {0890-5401},
	url = {http://www.sciencedirect.com/science/article/pii/0890540191900524},
	doi = {10.1016/0890-5401(91)90052-4},
	series = {Selections from 1989 {IEEE} Symposium on Logic in Computer Science},
	abstract = {The λ-calculus is considered a useful mathematical tool in the study of programming languages, since programs can be identified with λ-terms. However, if one goes further and uses βη-conversion to prove equivalence of programs, then a gross simplification is introduced (programs are identified with total functions from values to values) that may jeopardise the applicability of theoretical results. In this paper we introduce calculi, based on a categorical semantics for computations, that provide a correct basis for proving equivalence of programs for a wide range of notions of computation.},
	pages = {55--92},
	number = {1},
	journaltitle = {Information and Computation},
	shortjournal = {Information and Computation},
	author = {Moggi, Eugenio},
	urldate = {2014-12-02},
	date = {1991-07},
	file = {ScienceDirect Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/CE7SVM27/Moggi - 1991 - Notions of computation and monads.pdf:application/pdf;ScienceDirect Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/JCX2G4AA/0890540191900524.html:text/html}
}

@inproceedings{moggi_computational_1989,
	title = {Computational lambda-calculus and monads},
	doi = {10.1109/LICS.1989.39155},
	abstract = {The λ-calculus is considered a useful mathematical tool in the study of programming languages. However, if one uses βη-conversion to prove equivalence of programs, then a gross simplification is introduced. The author gives a calculus based on a categorical semantics for computations, which provides a correct basis for proving equivalence of programs, independent from any specific computational model},
	eventtitle = {, Fourth Annual Symposium on Logic in Computer Science, 1989. {LICS} '89, Proceedings},
	pages = {14--23},
	booktitle = {, Fourth Annual Symposium on Logic in Computer Science, 1989. {LICS} '89, Proceedings},
	author = {Moggi, E.},
	date = {1989-06},
	keywords = {Calculus, categorical semantics, computational lambda-calculus, Computer languages, Computer science, Contracts, equivalence of programs, formal languages, formal logic, Logic programming, Mathematical model, Mathematical Programming, mathematical tool, monads, programming languages, prove, Reasoning about programs, βη-conversion, λ-calculus},
	file = {IEEE Xplore Abstract Record:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/NAI27S8J/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/G38WAD4Z/Moggi - 1989 - Computational lambda-calculus and monads.pdf:application/pdf}
}

@incollection{benton_term_1993,
	title = {A term calculus for Intuitionistic Linear Logic},
	rights = {©1993 Springer-Verlag},
	isbn = {978-3-540-56517-8, 978-3-540-47586-6},
	url = {http://link.springer.com/chapter/10.1007/BFb0037099},
	series = {Lecture Notes in Computer Science},
	abstract = {In this paper we consider the problem of deriving a term assignment system for Girard's Intuitionistic Linear Logic for both the sequent calculus and natural deduction proof systems. Our system differs from previous calculi (e.g. that of Abramsky [1]) and has two important properties which they lack. These are the substitution property (the set of valid deductions is closed under substitution) and subject reduction (reduction on terms is well-typed). We also consider term reduction arising from cut-elimination in the sequent calculus and normalisation in natural deduction. We explore the relationship between these and consider their computational content.},
	pages = {75--90},
	number = {664},
	booktitle = {Typed Lambda Calculi and Applications},
	publisher = {Springer Berlin Heidelberg},
	author = {Benton, Nick and Bierman, Gavin and Paiva, Valeria de and Hyland, Martin},
	editor = {Bezem, Marc and Groote, Jan Friso},
	urldate = {2014-12-02},
	date = {1993-01-01},
	langid = {english},
	keywords = {Logics and Meanings of Programs, Mathematical Logic and Formal Languages, Mathematical Logic and Foundations, Programming Techniques},
	file = {Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/VAZ4REIR/Benton et al. - 1993 - A term calculus for Intuitionistic Linear Logic.pdf:application/pdf;Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/A3QTGDKI/BFb0037099.html:text/html}
}

@article{curry_elimination_1952,
	title = {The elimination theorem when modality is present},
	volume = {17},
	issn = {1943-5886},
	url = {http://journals.cambridge.org/article_S0022481200098650},
	doi = {10.2307/2266613},
	pages = {249--265},
	number = {4},
	journaltitle = {The Journal of Symbolic Logic},
	author = {Curry, Haskell B.},
	date = {1952-12}
}

@article{paiva_modalities_2004,
	title = {Modalities in Constructive Logics and Type Theories},
	volume = {14},
	issn = {0955-792X, 1465-363X},
	url = {http://logcom.oxfordjournals.org/content/14/4/439},
	doi = {10.1093/logcom/14.4.439},
	pages = {439--446},
	number = {4},
	journaltitle = {Journal of Logic and Computation},
	shortjournal = {J Logic Computation},
	author = {Paiva, Valeria de and Goré, Rajeev and Mendler, Michael},
	urldate = {2014-12-02},
	date = {2004-08-01},
	langid = {english},
	file = {Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/B3GX68RT/Paiva et al. - 2004 - Editorial.pdf:application/pdf;Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/PU4F3PCB/439.full.html:text/html}
}